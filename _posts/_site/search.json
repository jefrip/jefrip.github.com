{"entries":[{"title":"About","baseurl":"","url":"/about.html","date":null,"categories":[],"body":"Jefri Pakpahan is Analyst Programmer on University of Indonesia since 2011. Language : PHP, Java, C. Database : Oracle, PostgreSQL, MySQL. My (mini) Rigs : (Old) Macbook 13\" late 2010 with OWC GB RAM & Crucial SSD 512GB . Hobby : Playing DotA 2 Disclaimer All of this jefri-p.com blog's original content created by Jefri Pakpahan and licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. "},{"title":"Archive","baseurl":"","url":"/archive.html","date":null,"categories":[],"body":"2013 February February 19, 2013 » Pentingnya Database Connection Pooling 2012 July July 9, 2012 » Kohana 3.2 : Membuat Template June June 20, 2012 » Mencicipi Cloud Hosting gratis di OpenShift by Red Hat April April 18, 2012 » PHP Framework : Mengenal Framework Kohana 3 January January 12, 2012 » Membuat Search Engine dengan Zend Search Lucene 2011 November November 21, 2011 » Belajar MyBatis 3 "},{"title":"Articles by tag: bonecp","baseurl":"","url":"/tag/bonecp/","date":null,"categories":[],"body":""},{"title":"Articles by tag: c3p0","baseurl":"","url":"/tag/c3p0/","date":null,"categories":[],"body":""},{"title":"Articles by tag: cloud","baseurl":"","url":"/tag/cloud/","date":null,"categories":[],"body":""},{"title":"Articles by category: cloud","baseurl":"","url":"/topik/cloud/","date":null,"categories":[],"body":""},{"title":"Articles by tag: database-connection-pooling","baseurl":"","url":"/tag/database-connection-pooling/","date":null,"categories":[],"body":""},{"title":"Articles by category: database","baseurl":"","url":"/topik/database/","date":null,"categories":[],"body":""},{"title":"Articles by category: general","baseurl":"","url":"/topik/general/","date":null,"categories":[],"body":""},{"title":"Home","baseurl":"","url":"/index.html","date":null,"categories":[],"body":" Previous Page: of Next "},{"title":null,"baseurl":"","url":"/about/index.html","date":null,"categories":[],"body":"About Jefri Pakpahan is Analyst Programmer on University of Indonesia since 2011. Language : PHP, Java, C. Database : Oracle, PostgreSQL, MySQL. My (mini) Rigs : (Old) Macbook 13\" late 2010 with OWC GB RAM & Crucial SSD 512GB . Hobby : Playing DotA 2 Disclaimer All of this jefri-p.com blog's original content created by Jefri Pakpahan and licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. "},{"title":"Articles by tag: java","baseurl":"","url":"/tag/java/","date":null,"categories":[],"body":""},{"title":"Articles by category: java","baseurl":"","url":"/topik/java/","date":null,"categories":[],"body":""},{"title":"Articles by tag: jekyll","baseurl":"","url":"/tag/jekyll/","date":null,"categories":[],"body":""},{"title":"Articles by tag: Kohana 3.2","baseurl":"","url":"/tag/kohana-3-2/","date":null,"categories":[],"body":""},{"title":"Articles by category: kohana","baseurl":"","url":"/topik/kohana/","date":null,"categories":[],"body":""},{"title":"Articles by tag: kohana","baseurl":"","url":"/tag/kohana/","date":null,"categories":[],"body":""},{"title":"Articles by tag: lucene","baseurl":"","url":"/tag/lucene/","date":null,"categories":[],"body":""},{"title":"Articles by tag: mybatis","baseurl":"","url":"/tag/mybatis/","date":null,"categories":[],"body":""},{"title":"Articles by tag: openshift","baseurl":"","url":"/tag/openshift/","date":null,"categories":[],"body":""},{"title":"Articles by tag: paas","baseurl":"","url":"/tag/paas/","date":null,"categories":[],"body":""},{"title":"Pages","baseurl":"","url":"/pages.html","date":null,"categories":[],"body":"All Pages About Archive Atom Feed Articles by tag: bonecp Articles by tag: c3p0 Articles by tag: cloud Articles by category: cloud Articles by tag: database-connection-pooling Articles by category: database Articles by category: general Home RSS Feed Articles by tag: java Articles by category: java Articles by tag: jekyll Articles by tag: Kohana 3.2 Articles by category: kohana Articles by tag: kohana Articles by tag: lucene Articles by tag: mybatis Articles by tag: openshift Articles by tag: paas Pages Articles by tag: persistence-framework Articles by category: php Articles by tag: php Articles by tag: programming Articles by category: programming RSS Feed Articles by tag: search-engine Search Sitemap Articles by tag: Templating Articles by tag: wordpress Articles by tag: zend "},{"title":"Articles by tag: persistence-framework","baseurl":"","url":"/tag/persistence-framework/","date":null,"categories":[],"body":""},{"title":"Articles by category: php","baseurl":"","url":"/topik/php/","date":null,"categories":[],"body":""},{"title":"Articles by tag: php","baseurl":"","url":"/tag/php/","date":null,"categories":[],"body":""},{"title":"Articles by tag: programming","baseurl":"","url":"/tag/programming/","date":null,"categories":[],"body":""},{"title":"Articles by category: programming","baseurl":"","url":"/topik/programming/","date":null,"categories":[],"body":""},{"title":"Articles by tag: search-engine","baseurl":"","url":"/tag/search-engine/","date":null,"categories":[],"body":""},{"title":"Search","baseurl":"","url":"/search.html","date":null,"categories":[],"body":" "},{"title":"Articles by tag: Templating","baseurl":"","url":"/tag/templating/","date":null,"categories":[],"body":""},{"title":"Articles by tag: wordpress","baseurl":"","url":"/tag/wordpress/","date":null,"categories":[],"body":""},{"title":"Articles by tag: zend","baseurl":"","url":"/tag/zend/","date":null,"categories":[],"body":""},{"title":"Belajar MyBatis 3","baseurl":"","url":"/2011/11/belajar-mybatis-3","date":"2011-11-21 09:31:11 +0700","categories":["java","mybatis"],"body":"Setelah sekian lama akhirnya saya bisa menuliskan blog lagi, yups di web saya sendiri jefri-p.com , semester ini saya mendapat banyak matakuliah yang mempunyai banyak tugas akhir, salah satunya adalah PSBO (Pemrograman Sistem Berorientasi Objek) dan tugas akhirnya apalagi kalau bukan membuat sistem yang berorientasi objek, saya memilih Java sebagai bahasa pemrogramannya walaupun saya belum terlalu mahir java . Demi memudahkan project tersebut saya memilih MyBatis Framework (yang dulunya iBatis ). ibatis mybatis Apakah MyBatis itu? MyBatis Framework adalah Data Mapper framework yang membuat kita lebih mudah menggunakan database relational dengan aplikasi berorientasi objek. The MyBatis data mapper framework makes it easier to use a relational database with object-oriented applications. MyBatis couples objects with stored procedures or SQL statements using a XML descriptor. Simplicity is the biggest advantage of the MyBatis data mapper over object relational mapping tools. To use the MyBatis data mapper, you rely on your own objects, XML, and SQL. There is little to learn that you don’t already know. With the MyBatis Data Mapper, you have the full power of both SQL and stored procedures at your fingertips. ( www.mybatis.org ) Tanpa banyak basa-basi mari kita pelajari contoh pertama menggunakan MyBatis Pre-Requisites Saya menggunakan: IDE: Eclipse (atau bisa yang lain) DataBase: MySQL Libs/jars: Mybatis , MySQL conector pertama kita buat database java, dan tabel contact (dalam hal ini menggunakan MySQL) Sample Database DROP TABLE IF EXISTS `contact`; CREATE TABLE `contact` ( `id` int(15) NOT NULL AUTO_INCREMENT, `namalengkap` varchar(50) DEFAULT NULL, `phone` varchar(20) DEFAULT NULL, `email` varchar(50) DEFAULT NULL, PRIMARY KEY (`id`) ); INSERT INTO contact (id, namalengkap, phone, email) VALUES ( 1,'Jefri Pakpahan','1245123','email@jefri-p.com'); INSERT INTO contact (id, namalengkap, phone, email) VALUES ( 2,'Jefri Pakpahan','1245123','email@jefri-p.com'); INSERT INTO contact (id, namalengkap, phone, email) VALUES ( 3,'Jefri Pakpahan','1245123','email@jefri-p.com'); INSERT INTO contact (id, namalengkap, phone, email) VALUES ( 4,'Jefri Pakpahan','1245123','email@jefri-p.com'); 1. Contact Beans / POJO [java] package org.mycontact.example.beans; public class Contact { Integer id; String namalengkap; String phone; String email; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNamaLengkap() { return namalengkap; } public void setNamaLengkap(String namalengkap) { this.namalengkap = namalengkap; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } }[/java] 2. ContactMapper.xml Berikut adalah ContactMapper.xml [xml] <?xml version=\"1.0\" encoding=\"UTF-8\"?> insert into contact ( namalengkap, phone, email ) values ( #{namalengkap}, #{phone}, #{email} ) update contact set namalengkap = #{namalengkap}, phone = #{phone}, email = #{email} where id = #{id} delete from contact where id = #{value} <select> select * from contact</select> <select> select</select> <select> id, namalengkap, phone, email</select> <select> from contact</select> <select> where id = #{value}</select> <select> select</select> <select> id, namalengkap, phone, email</select> <select> from contact ORDER BY id DESC LIMIT 0,1</select> [/xml] 3. Register ContactMapper.xml ke configuration.xml [java]package org.mycontact.example.dao; import java.io.FileNotFoundException; import java.io.IOException; import java.io.Reader; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; public class MyBatisConnectionFactory { private static SqlSessionFactory sqlSessionFactory; static { try { String resource = \"org/mycontact/example/xml/configuration.xml\"; Reader reader = Resources.getResourceAsReader(resource); if (sqlSessionFactory == null) { sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); } } catch (FileNotFoundException fileNotFoundException) { fileNotFoundException.printStackTrace(); } catch (IOException iOException) { iOException.printStackTrace(); } } public static SqlSessionFactory getSqlSessionFactory() { return sqlSessionFactory; } }[/java] 4. MyBatisConnectionFactory [java] package org.mycontact.example.dao; import java.io.FileNotFoundException; import java.io.IOException; import java.io.Reader; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; public class MyBatisConnectionFactory { private static SqlSessionFactory sqlSessionFactory; static { try { String resource = \"org/mycontact/example/xml/configuration.xml\"; Reader reader = Resources.getResourceAsReader(resource); if (sqlSessionFactory == null) { sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); } } catch (FileNotFoundException fileNotFoundException) { fileNotFoundException.printStackTrace(); } catch (IOException iOException) { iOException.printStackTrace(); } } public static SqlSessionFactory getSqlSessionFactory() { return sqlSessionFactory; } }[/java] 5. ContactDAO [java]package org.mycontact.example.dao; import java.util.List; import org.mycontact.example.dao.MyBatisConnectionFactory; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.mycontact.example.beans.Contact; public class ContactDAO { private SqlSessionFactory sqlSessionFactory; public ContactDAO(){ sqlSessionFactory = MyBatisConnectionFactory.getSqlSessionFactory(); } /** * Returns the list of all Contact instances from the database. * @return the list of all Contact instances from the database. */ @SuppressWarnings(\"unchecked\") public List selectAll(){ SqlSession session = sqlSessionFactory.openSession(); try { List list = session.selectList(\"Contact.getAll\"); return list; } finally { session.close(); } } /** * Returns a Contact instance from the database. * @param id primary key value used for lookup. * @return A Contact instance with a primary key value equals to pk. null if there is no matching row. */ public Contact selectById(int id){ SqlSession session = sqlSessionFactory.openSession(); try { Contact contact = (Contact) session.selectOne(\"Contact.getById\",id); return contact; } finally { session.close(); } } /** * Updates an instance of Contact in the database. * @param contact the instance to be updated. */ public void update(Contact contact){ SqlSession session = sqlSessionFactory.openSession(); try { session.update(\"Contact.update\", contact); session.commit(); } finally { session.close(); } } /** * Insert an instance of Contact into the database. * @param contact the instance to be persisted. */ public void insert(Contact contact){ SqlSession session = sqlSessionFactory.openSession(); try { session.insert(\"Contact.insert\", contact); session.commit(); } finally { session.close(); } } /** * Delete an instance of Contact from the database. * @param id primary key value of the instance to be deleted. */ public void delete(int id){ SqlSession session = sqlSessionFactory.openSession(); try { session.delete(\"Contact.deleteById\", id); session.commit(); } finally { session.close(); } } }[/java] 6. Example Main program lalu mencoba program kita package org.mycontact.example.main; import java.util.List; import org.mycontact.example.beans.Contact; import org.mycontact.example.dao.ContactDAO; public class MainExample { public static void main(String[] args) { ContactDAO contactdao = new ContactDAO(); //insert Contact contactIns = new Contact(); contactIns.setNamaLengkap(\"Jee Hernandez\"); contactIns.setEmail(\"jee@email.com\"); contactIns.setPhone(\"1235\"); contactdao.insert(contactIns); //select last Id Contact contact0 = contactdao.selectByLastId(); System.out.println(contact0.getId() + \":\" + contact0.getEmail() + \":\" + contact0.getNamaLengkap() + \":\" + contact0.getPhone()); //select by id = 2 Contact contact1 = contactdao.selectById(2); System.out.println(contact1.getId() + \":\" + contact1.getEmail() + \":\" + contact1.getNamaLengkap() + \":\" + contact1.getPhone()); //delete id 4 contactdao.delete(4); //update 5 Contact contactEdit = new Contact(); contactEdit.setNamaLengkap(\"Jefri Edit\"); contactEdit.setEmail(\"Jefri@email.com\"); contactEdit.setPhone(\"123456\"); contactEdit.setId(2); contactdao.update(contactEdit); //select all List contact2 = contactdao.selectAll(); for (Contact contact : contact2) { System.out.println(contact.getId() + \":\" + contact.getEmail() + \":\" + contact.getNamaLengkap() + \":\" + contact.getPhone()); } } } Jika Anda kurang paham ataupun kurang jelas, ada baiknya membaca User Guide MyBatis. Selamat Berimajinasi :) NB : Maaf syntaxhighlighternya agak error ketika memasukan email. Sumber "},{"title":"Membuat Search Engine dengan Zend Search Lucene","baseurl":"","url":"/2012/01/membuat-search-engine-dengan-zend-search-lucene","date":"2012-01-12 07:34:19 +0700","categories":["php","programming"],"body":"Setelah sekian lama tidak mengisi blog, akhirnya baru ada niat ngisi blog lagi. kali ini saya akan mengangkat topik yang berbeda dengan sebelumnya belajar mybatis 3 yaitu Membuat Search Engine dengan Zend Search Lucene. Saya membuat tutorial di karena kan karena ada tugas Temu Kembali Informasi (TKI), ya lagi-lagi tugas kuliah (namanya juga anak kuliahan). Zend_Search_Lucene adalah full-text search engine framework porting dari Apache Lucene dan bagian dari Zend Framework , Anda dapat mendownload di web tersebut . Zend_Search_Lucene menjanjikan cara sederhana untuk menambahkan fungsi pencarian ke aplikasi tanpa membutuhkan tambahan ekstensi php atau bahkan database. Langsung saja kita praktikan 1. Membuat Index Sebelum kita mencari data terlebih dahulu Anda harus membuat Indexing yang akan mengumpulkan, mem-parsing, dan menyimpan data untuk memudahkan pencarian informasi yang cepat dan akurat Disini kita akan mencoba mengindex file xml File data.xml [xml] <?xml version=\"1.0\" encoding=\"iso-8859-1\"?> <documents> <document> <id>1</id> <title>first title on document</title> <content>Ilkomers content </content> <published>1012325463</published> </document> <document> <id>3</id> <title>Search Lucene by Jefri Rahmat Yusuf </title> <content>tki search lucene from xml data</content> <published>1012356463</published> </document> <document> <id>4</id> <title>Temu Kembali Informasi</title> <content>Temu kembali informasi (tki) with lucene by Jefri Rahmat Yusuf another document</content> <published>1012445463</published> </document> <document> <id>6</id> <title>another Title in Lucene</title> <content>This is another document for lucene</content> <published>1013325467</published> </document> </documents> [/xml] File indexing.php [php] <?php require_once 'Zend/Search/Lucene.php'; function sanitize($input) { return htmlentities(strip_tags( $input )); } $xml = 'data.xml'; //cek file xml if (file_exists($xml)){ $xml = simplexml_load_file($xml); } else { exit('Error.'); } //directory data temporary untuk indexing $xml_index = 'index/xml_index'; $index = new Zend_Search_Lucene($xml_index,true); // index setiap item foreach ($xml as $item) { if ($item->title && $item->content) { $doc = new Zend_Search_Lucene_Document(); $doc->addField(Zend_Search_Lucene_Field::Keyword('title',sanitize($item->title))); $doc->addField(Zend_Search_Lucene_Field::Text('content',sanitize($item->content))); $doc->addField(Zend_Search_Lucene_Field::UnIndexed('published',sanitize($item->published))); echo \"\\tMengindex: <b>\".$item->title.\"</b><br/>\"; $index->addDocument($doc); } } $index->commit(); echo '<br/>'.$index->count().\" Dokumen terindex.\\n\"; ?> [/php] Pertama yang dilakukan adalah cek file xml [php] $xml = 'data.xml'; //cek file xml if (file_exists($xml)){ $xml = simplexml_load_file($xml); } else { exit('Error.'); } [/php] Lalu tentukan directori untuk menampung data indexing [php] //directory data temporary untuk indexing $xml_index = 'index/xml_index'; [/php] Lalu indexing data xml [php] $index = new Zend_Search_Lucene($xml_index,true); // index setiap item foreach ($xml as $item) { if ($item->title && $item->content) { //buat dan index dokumen } } $index->commit(); echo '<br/>'.$index->count().\" Dokumen terindex.\\n\"; [/php] Untuk membuat dokumen ke index, kita harus membuat document object dan field konten yang spesifik yang akan kita index, dalam hal ini kita akan mengindex title, content dan published. [php] $doc->addField(Zend_Search_Lucene_Field::Keyword('title',sanitize($item->title))); $doc->addField(Zend_Search_Lucene_Field::Text('content',sanitize($item->content))); $doc->addField(Zend_Search_Lucene_Field::UnIndexed('published',sanitize($item->published))); echo \"\\tMengindex: <b>\".$item->title.\"</b><br/>\"; $index->addDocument($doc); [/php] Item-item yang akan di index terlebih dahulu di sanitasi (sanitize). Berikut adalah keterangan dari masing-masing Zend_Search_Lucene_Field Zend_Search_Lucene_Field::Keyword // Field is not tokenized, but is indexed and stored within the index. Zend_Search_Lucene_Field::UnIndexed // Field is not tokenized nor indexed, but is stored in the index. Zend_Search_Lucene_Field::Binary // Binary String valued Field that is not tokenized nor indexed, but is stored in the index. Zend_Search_Lucene_Field::Text // Field is tokenized and indexed, and is stored in the index. Zend_Search_Lucene_Field::UnStored // Field is tokenized and indexed, but is not stored in the index. 2. Pencarian Index Sebelumnya kita sudah membuat Zend_Search_Lucene index pada data, mari kita implementasikan pencarian. [php] <?php require_once 'Zend/Search/Lucene.php'; //buka file index $index = new Zend_Search_Lucene('index/xml_index'); $query = 'jefri'; if(strlen($query)<4) { die('Kata-kata harus lebih dari 3 huruf'); } $hits = $index->find($query); echo \"Index Mempunyai \".$index->count().\" dokumen.<br/>\"; echo \"Pencarian untuk query '\".$query.\"' menghasilkan \" .count($hits). \" hits<br/>\"; foreach ($hits as $hit) { echo \"<pre>\"; echo $hit->title.\"<br/>\"; echo $hit->content.\"<br/>\"; echo \"\\tScore: \".sprintf('%.2f', $hit->score).\"<br/>\"; } ?> [/php] Kita include library , dan buka file index dan cari term lalu looping hasil, kita dapat melakukan pencarian query dengan multiple query terms . Zend_Search_Lucene sangat Powerfull dan simpel, untuk dokumentasi lengkap dapat dilihat di file document yang ada di Zend Framework atau http://framework.zend.com/manual/en/zend.search.lucene.html . Sekian. sumber bacaan : http://devzone.zend.com/397/roll-your-own-search-engine-with-zend_search_lucene/ "},{"title":"PHP Framework : Mengenal Framework Kohana 3","baseurl":"","url":"/2012/04/php-framework-mengenal-framework-kohana-3","date":"2012-04-18 07:56:18 +0700","categories":["kohana","php"],"body":"Kohana 3  adalah framework elegan PHP5 yang menggunakan pola arsitektur Hierarchical Model View Controller (HMVC)  yang kaya akan komponen untuk membangun aplikasi web.  Ada beberapa alasan mengapa Anda harus memilih Kohana sebagai PHP framework tetapi yang utama adalah keamanan, ringan dan mudah digunakan.   Dasar HMVC Cara mudah untuk berpikir HMVC adalah memikirkan AJAX tanpa tambahan pemanggilan server. Misalnya, jika Anda memiliki tindakan untuk AJAX yang menampilkan daftar pengguna, Anda dapat menggunakan kembali tindakan yang di controller lain, daripada menduplikasi metode ini. Salah satu fitur yang paling powerful di Kohana 3 adalah kemampuan untuk memanggil permintaan lain setiap saat selama request flow. Pendekatan MVC berlapis memungkinkan Anda untuk merakit sebuah klien kompleks tier dan benar-benar memanfaatkan keuntungan objek oriented. Cascading Filesystem Filesystem Kohana adalah hirarki untuk struktur direktori sama yang cascade. Hirarki di Kohana (digunakan bila file dimuat oleh Kohana ::find_file) adalah dengan urutan sebagai berikut.: Arsitektur Berlapis - Mengurangi ketergantungan antara bagian yang berbeda dari program - Mendorong reusable kode, komponen dan modul - Meningkatkan extensibility dan mengurangi maintenance - Beberapa digunakan untuk desain HMVC dalam arsitektur client-tier - Antarmuka elemen atau widget Modular - Aplikasi dan Kontrol Menu - Interaksi Server - Reusable Application Flows File yang berada di direktori yang lebih tinggi urutan lokasi include didahulukan atas file dengan nama yang sama di bawahnya urutan, dimana memungkinkan untuk overload file apa saja dengan menempatkan sebuah file dengan nama yang sama di direktori \"lebih tinggi\". Path modules Hal ini ditetapkan sebagai associative array menggunakan Kohana::modules di APPPATH / bootstrap.php. Setiap nilai dari array akan dicaridalam urutan bahwa modules sudah didefinisikan. Path system Didefinisikan sebagai SYSPATH di index.php. Nilai default adalah system. Semua file \"inti\" utama atau kelas didefinisikan di sini. Path application Merupakan tempat pengembangan aplikasi  yang di dalamnya akan terdapat berbagai macam direktori yang berhubungan dengan aplikasi kita termasuk folder cache dan log. Classes adalah tempat di mana kita bisa melakukan overriding terhadap class yang berasal dari core system dan modules, juga sebagai tempat untuk meletakkan Controller serta Model. Views untuk meletakkan view yang akan dipanggil pada Controller. Instalasi Kohana Framework - Terlebih dahulu download   kohana 3 melalui  http://kohanaframework.org/download  ataupun dapat melalui github  https://github.com/kohana/kohana  (dalam hal ini adalah kohana 3.2) - unzip kohana-3.2.0.zip - Ubah nama folder kohana-3.2-master-1 menjadi kohana dan masukkan kedalam docroot dari webserver Anda - Buat folder bernama cache dan logs di dalam folder application dan chmod 666 - Buka browser Anda dan arahkan ke url http://localhost/kohana maka akan memanggil skrip install.php dan memeriksa persyaratan server Anda. Kohana dapat berjalan di hampir semua environment, dengan minimum persyaratan : - Apache server - PHP versi >= 5.2.3 Anda dapat menginstall XAMPP ataupun WAMP sebagai web server dan database server (Apache, PHP, MySql Server) - Setting pada bootstrap.php jika kohana ada berada dalam subdirectory. Pada line 82, ubah menjadi Kohana::init(array( 'base_url' => '/kohana', )); Jika berhasil maka akan muncul tampilan seperti berikut : Jika sudah berhasil dalam pengecekan kebutuhan dari kohana, lalu hapus file install.php, maka akan muncul seperti ini : hello, world! Yup, Anda berhasil melakukan instalasi kohana 3, it's easy isn't it? sekarang Anda dapat membuat project menggunakan framework kohana. Tutorial berikutnya akan mempelajari lebih dalam tentang kohana 3 berikut dengan contohnya. Bersambung .... Bahan bacaan : http://kohanaframework.org/ http://kerkness.ca/kowiki/doku.php "},{"title":"Mencicipi Cloud Hosting gratis di OpenShift by Red Hat","baseurl":"","url":"/2012/06/mencicipi-cloud-hosting-gratis-di-openshift-red-hat","date":"2012-06-20 05:44:41 +0700","categories":["cloud"],"body":"Apa itu cloud computing? dalam blog teknoinfo.web.id dijelaskan bahwa Cloud Computing adalah topik yang sedang hangat dibicarakan dan lambat laun para IT professional akan mengadaptasi teknologi ini. Di blog tersebut pun dijelaskan beberapa teknologi cloud service, seperti : - Infrastucture as a Service (IaaS) - Platform as a Service (PaaS) -  Software  as a Service (SaaS) Disini kita akan mencoba menggunakan salah satu cloud service (Paas) gratis pada OpenShift by Red Hat . Karena masih versi Beta (gratis) dan belum commercial (berbayar) tidak disarankan untuk membuat website yang akan di pakai untuk waktu yang lama di OpenShift. Sebelumnya kita perlu register accout OpenShift dan menginstall client tools . butuh menginstall : - Ruby - RubyGems  Lalu setelah register dan menginstall client tools, login ke Account OpenShift di  https://openshift.redhat.com/app/login  , setelah masuk ke dashboard Openshift, kita set dahulu namespace agar aplikasi kita unik dan menghindari url yang sama, klik tab My Account Lalu klik tab create application. Pilih aplikasi Framework / CMS yang akan kita install, disini saya memilih WordPress, lalu masukkan nama aplikasi yang akan kita buat dalam namespace ea-rhcloud.com disini saya memakai http://blog.ea-rhcloud.com klik Create Application. Tunggu hingga proses Configure new Application selesai. Ya Anda telah berhasil menginstall WordPress di OpenShift, buka alamat url nya, disini http://blog-ea.rhcloud.com dan jangan lupa mengganti password default adminnya. jika Anda ingin mengclone directory dari WordPress dapat menggunakan git clone (url yang di sebutkan pada akhir instalasi).  contoh : git clone ssh://bc8208f0819a43298775553eee04b86d@blog-ea.rhcloud.com/~/git/blog.git/ Anda juga dapat mengimport data WordPress menggunakan phpmyadmin, tetapi sebelumnya harus Add Cartridge, lalu pilih phpMyAdmin 3.4, maka Anda dapat mengimport melalui url http://blog-ea.rhcloud.com/phpmyadmin. NB : website saya http://www.jefri-p.com sedang mencoba OpenShift, mudah-mudahan gratisannya lama (hidup gratisan!). Sekian dan selamat mencoba (mumpung gratis) :D. Sumber Bacaan : http://teknoinfo.web.id/teknologi-cloud-computing/ https://openshift.redhat.com/app/getting_started "},{"title":"Kohana 3.2 : Membuat Template","baseurl":"","url":"/2012/07/kohana-3-2-membuat-template","date":"2012-07-09 09:52:09 +0700","categories":["kohana","php"],"body":"Dalam pembuatan sebuah website/sistem informasi template merupakan elemen penting dalam penyajian tampilan sebuah website, disini akan dijelaskan penggunaan template pada Kohana 3.2, agar pembuatan suatu website lebih efisien dan simpel. Melanjutkan Blog sebelumnya , defaultnya template kohana membuat controller turunan dari Controller_Template, namun jika kita membuat 1 template untuk semua kita harus menyertakan title, javascript, css dll yang membuat wasting code. Oleh karena itu dibutuhkan sebuah suatu controller template baru yang akan diturunkan ke controller kita yang mempunyai template yang sama. 1. kita buat template kita yang berbentuk HTML (dalam hal ini menggunakan Twitter Bootstrap ), tinggal menambahkan beberapa tag php. - title (string) : title dari page - scripts (array) : array dari javascripts yang dibutuhkan pada page - styles (array) : array dari CSS yang dibutuhkan pada page - content (string/array) : isi dari konten website ok, just show the code :) <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>Kohana 3.2 Templating with Twitter Bootstrap <?php echo ( ! empty($title)) ? Html::chars(\" - \".$title) : ''; ?></title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <meta name=\"description\" content=\"\"> <meta name=\"author\" content=\"\"> <!-- Le styles --> <style> body '{ padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */ }' </style> <?php foreach ($styles as $file => $type) echo HTML::style($file, array('media' => $type)), \"\\n\" ?> <?php foreach ($scripts as $file) echo HTML::script($file), \"\\n\" ?> <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements --> <!--[if lt IE 9]> <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script> <![endif]--> <!-- Le fav and touch icons --> <link rel=\"shortcut icon\" href=\"assets/ico/favicon.ico\"> <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"assets/ico/apple-touch-icon-144-precomposed.png\"> <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"assets/ico/apple-touch-icon-114-precomposed.png\"> <link rel=\"apple-touch-icon-precomposed\" sizes=\"72x72\" href=\"assets/ico/apple-touch-icon-72-precomposed.png\"> <link rel=\"apple-touch-icon-precomposed\" href=\"assets/ico/apple-touch-icon-57-precomposed.png\"> </head> <body> <div class=\"navbar navbar-fixed-top\"> <div class=\"navbar-inner\"> <div class=\"container\"> <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\"> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> </a> <a class=\"brand\" href=\"#\">Jefri</a> <div class=\"nav-collapse\"> <ul class=\"nav\"> <li class=\"active\"><a href=\"#\">Home</a></li> <li><a href=\"#about\">About</a></li> <li><a href=\"#contact\">Contact</a></li> </ul> </div><!--/.nav-collapse --> </div> </div> </div> <div class=\"container\"> <?php echo $content ?> </div> <!-- /container --> </body> </html> 2. Buat Controller_Template baru untuk turunan controller yang akan kita pakai dengan template yang sama. sehingga akan terlihat seperti ini : Controller_Template_Layout extends Controller_Template Controller_Page extends Controller_Template_Layout Jadi setiap controller akan meng-extends Controller_Template_Layout [code lang=\"php\"] <?php defined('SYSPATH') or die('No direct access allowed.'); class Controller_Template_Layout extends Controller_Template { public $template = 'template/layout'; /** * The before() method is called before your controller action. * In our template controller we override this method so that we can * set up default values. These variables are then available to our * controllers if they need to be modified. */ public function before() { parent::before(); $this->session = Session::instance(); if ($this->auto_render) { // Initialize empty values $this->template->title = ''; $this->template->content = ''; $this->template->templates = ''; $this->template->styles = array(); $this->template->scripts = array(); } } /** * The after() method is called after your controller action. * In our template controller we override this method so that we can * make any last minute modifications to the template before anything * is rendered. */ public function after() { if ($this->auto_render) { $styles = array( 'assets/css/bootstrap.css' => 'screen, projection', 'assets/css/bootstrap-responsive.css' => 'screen, projection', ); $scripts = array( 'assets/js/jquery-1.7.2.min.js', 'assets/js/bootstrap.js', ); $this->template->styles = array_merge( $styles, $this->template->styles ); $this->template->scripts = array_merge( $scripts, $this->template->scripts ); } parent::after(); } } [/code] 3. Membuat controller yang akan menggunakan template yang sudah kita buat. [code lang=\"php\"] <?php defined('SYSPATH') or die('No direct script access.'); class Controller_Page extends Controller_Template_Layout { public function action_index() { $this->template->title = __('Welcome to kohana 3.2 Template'); $this->template->content = View::factory('page/home'); } } [/code] Template untuk kohana 3.2 siap di pakai. Download melalui github Kohana Template Sumber Bacaan : - http://kerkness.ca/kowiki/doku.php - http://kohanaframework.org/3.2/guide/kohana/mvc/views "},{"title":"Pentingnya Database Connection Pooling","baseurl":"","url":"/2013/02/pentingnya-database-connection-pooling","date":"2013-02-19 08:02:28 +0700","categories":["database"],"body":"Beberapa saat lalu saya memikirkan betapa pentingnya resource pada server database, dulu sewaktu saya duduk dibangku kuliah pada saat mengerjakan project/tugas belum terlalu memikirkan hal tersebut.  Jika aplikasi kita tergantung pada database otomatis kita harus selalu terkoneksi ke database, entah untuk query select, insert, update atau delete. Connection Pooling adalah suatu metode untuk menjaga supaya koneksi database terbuka sehingga dapat digunakan kembali, karena membuka koneksi ke database adalah proses yang \"Mahal\", jadi pooling menjaga koneksi tetap aktif. Keuntungan Connection Pooling : - Mempercepat response time (pada saat membuka koneksi) - Penggunaan kembali resource database - Penggunaan memory lebih hemat Connection Pooling biasanya populer di kalangan pengguna Java (Application Server), banyak library yang tersedia untuk dapat menggunakan fitur ini, contohnya : - Commons Database Connection Pooling (Commons DBCP) - C3P0 - JDBC3 Connection and Statement Pooling - BoneCP Saya sangat tertatik dengan BoneCP, dikarenakan pada website http://jolbox.com/dynamic-benchmark.html disertakan benchmark dengan beberapa Database Connection Pooling seperti diatas, dan hasilnya WOW. Jika sempat saya akan membuat aplikasi kecil menggunakan PlayFramework! dengan Database Connection Pooling menggunakan library diatas. Saya adalah seorang penggemar programming PHP, namun sayang sekali PHP tidak mendukung untuk Pooling Connection, PHP hanya mendukung Persistent Connection. Persistent Connection != Connection Pooling. Saat saya sedang mencari, ternyata Oracle mendukung Pooling untuk PHP dengan nama Database Resident Connection Pooling . Di website tersebut ditulis : DRCP complements middle-tier connection pools that share connections between threads in a middle-tier process. In addition, DRCP enables sharing of database connections across middle-tier processes on the same middle-tier host and even across middle-tier hosts. This results in significant reduction in key database resources needed to support a large number of client connections, thereby reducing the database tier memory footprint and boosting the scalability of both middle-tier and database tiers. Having a pool of readily available servers also has the additional benefit of reducing the cost of creating and tearing down client connections. DRCP is especially relevant for architectures with multi-process single threaded application servers (such as PHP/Apache) that cannot perform middle-tier connection pooling. The database can still scale to tens of thousands of simultaneous connections with DRCP. Yup DRCP memberikan solusi Pooling bagi PHPers :D Berikut sedikit perbandingan jika menggunakan DRCP dibanding dengan Dedicated Server dan Shared server dari situs tersebut : Dedicated Server Memory used = 5000 X (400 KB + 4 MB) = 22 GB Shared Server Memory used = 5000 X 400 KB + 100 X 4 MB = 2.5 GB Out of the 2.5 GB, 2 GB is allocated from the SGA. Database Resident Connection Pooling Memory used = 100 X (400 KB + 4 MB) + (5000 X 35KB)= 615 MB Sungguh Sangat jauh bukan?ya itu merupakan sedikit dari salah satu Keuntungan Database Connection Pooling. CMIIW :) Bacaan : http://stackoverflow.com/questions/4041114/what-is-database-pooling http://docs.oracle.com/cd/E17781_01/appdev.112/e18555/ch_two.htm#BABHHEDD http://docs.oracle.com/cd/B28359_01/server.111/b28310/manproc002.htm http://pic.dhe.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=%2Fcom.ibm.websphere.base.doc%2Finfo%2Faes%2Fae%2Fcdat_conpool.html "}]}